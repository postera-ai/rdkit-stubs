from typing import Any, ClassVar

APolar: SASAClass
LeeRichards: SASAAlgorithm
NACCESS: SASAClassifier
OONS: SASAClassifier
Polar: SASAClass
Protor: SASAClassifier
ShrakeRupley: SASAAlgorithm
Unclassified: SASAClass

class SASAAlgorithm:
    LeeRichards: ClassVar[SASAAlgorithm] = ...
    ShrakeRupley: ClassVar[SASAAlgorithm] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class SASAClass:
    APolar: ClassVar[SASAClass] = ...
    Polar: ClassVar[SASAClass] = ...
    Unclassified: ClassVar[SASAClass] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class SASAClassifier:
    NACCESS: ClassVar[SASAClassifier] = ...
    OONS: ClassVar[SASAClassifier] = ...
    Protor: ClassVar[SASAClassifier] = ...
    names: ClassVar[dict] = ...
    values: ClassVar[dict] = ...
    __slots__: ClassVar[tuple] = ...

class SASAOpts:
    __instance_size__: ClassVar[int] = ...
    algorithm: Any
    classifier: Any
    probeRadius: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def __reduce__(cls) -> Any: ...

def CalcSASA(RDKit, boost) -> Any: ...
def MakeFreeSasaAPolarAtomQuery() -> Any: ...
def MakeFreeSasaPolarAtomQuery() -> Any: ...
def classifyAtoms(RDKit) -> Any: ...
