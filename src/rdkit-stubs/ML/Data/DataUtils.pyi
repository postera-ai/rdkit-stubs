from _typeshed import Incomplete
from rdkit.DataStructs import BitUtils as BitUtils
from rdkit.ML.Data import MLData as MLData
from rdkit.utils import fileutils as fileutils

def permutation(nToDo): ...
def WriteData(outFile, varNames, qBounds, examples) -> None: ...
def ReadVars(inFile): ...
def ReadQuantExamples(inFile): ...
def ReadGeneralExamples(inFile): ...
def BuildQuantDataSet(fileName): ...
def BuildDataSet(fileName): ...
def CalcNPossibleUsingMap(
    data, order, qBounds, nQBounds: Incomplete | None = ..., silent: bool = ...
): ...
def WritePickledData(outName, data) -> None: ...
def TakeEnsemble(vect, ensembleIds, isDataVect: bool = ...): ...
def DBToData(
    dbName,
    tableName,
    user: str = ...,
    password: str = ...,
    dupCol: int = ...,
    what: str = ...,
    where: str = ...,
    join: str = ...,
    pickleCol: int = ...,
    pickleClass: Incomplete | None = ...,
    ensembleIds: Incomplete | None = ...,
): ...
def TextToData(reader, ignoreCols=..., onlyCols: Incomplete | None = ...): ...
def TextFileToData(fName, onlyCols: Incomplete | None = ...): ...
def InitRandomNumbers(seed) -> None: ...
def FilterData(
    inData,
    val,
    frac,
    col: int = ...,
    indicesToUse: Incomplete | None = ...,
    indicesOnly: int = ...,
): ...
def CountResults(inData, col: int = ..., bounds: Incomplete | None = ...): ...
def RandomizeActivities(
    dataSet, shuffle: int = ..., runDetails: Incomplete | None = ...
) -> None: ...
def _runDoctests(verbose: Incomplete | None = ...) -> None: ...
