from _typeshed import Incomplete

numericTypes: Incomplete

class MLDataSet:
    data: Incomplete
    nResults: Incomplete
    nVars: Incomplete
    nPts: Incomplete
    qBounds: Incomplete
    nPossibleVals: Incomplete
    varNames: Incomplete
    ptNames: Incomplete
    def __init__(
        self,
        data,
        nVars: Incomplete | None = ...,
        nPts: Incomplete | None = ...,
        nPossibleVals: Incomplete | None = ...,
        qBounds: Incomplete | None = ...,
        varNames: Incomplete | None = ...,
        ptNames: Incomplete | None = ...,
        nResults: int = ...,
    ) -> None: ...
    def _CalcNPossible(self, data): ...
    def GetNResults(self): ...
    def GetNVars(self): ...
    def GetNPts(self): ...
    def GetNPossibleVals(self): ...
    def GetQuantBounds(self): ...
    def __getitem__(self, idx): ...
    def __setitem__(self, idx, val): ...
    def GetNamedData(self): ...
    def GetAllData(self): ...
    def GetInputData(self): ...
    def GetResults(self): ...
    def GetVarNames(self): ...
    def GetPtNames(self): ...
    def AddPoint(self, pt) -> None: ...
    def AddPoints(self, pts, names) -> None: ...

class MLQuantDataSet(MLDataSet):
    def _CalcNPossible(self, data): ...
    def GetNamedData(self): ...
    def GetAllData(self): ...
    def GetInputData(self): ...
    def GetResults(self): ...
    data: Incomplete
    nResults: Incomplete
    nVars: Incomplete
    nPts: Incomplete
    qBounds: Incomplete
    nPossibleVals: Incomplete
    varNames: Incomplete
    ptNames: Incomplete
    def __init__(
        self,
        data,
        nVars: Incomplete | None = ...,
        nPts: Incomplete | None = ...,
        nPossibleVals: Incomplete | None = ...,
        qBounds: Incomplete | None = ...,
        varNames: Incomplete | None = ...,
        ptNames: Incomplete | None = ...,
        nResults: int = ...,
    ) -> None: ...
