from _typeshed import Incomplete
from rdkit.ML.Data import Quantize as Quantize

def _getBinId(val, qBounds): ...

class NaiveBayesClassifier:
    _attrs: Incomplete
    _mEstimateVal: Incomplete
    _useSigs: Incomplete
    _classProbs: Incomplete
    _examples: Incomplete
    _trainingExamples: Incomplete
    _testExamples: Incomplete
    _badExamples: Incomplete
    _QBoundVals: Incomplete
    _nClasses: Incomplete
    _qBounds: Incomplete
    _nPosVals: Incomplete
    _needsQuant: int
    _name: str
    mprob: Incomplete
    _condProbs: Incomplete
    def __init__(
        self, attrs, nPossibleVals, nQuantBounds, mEstimateVal=..., useSigs: bool = ...
    ) -> None: ...
    def GetName(self): ...
    def SetName(self, name) -> None: ...
    def NameModel(self, varNames) -> None: ...
    def GetExamples(self): ...
    def SetExamples(self, examples) -> None: ...
    def GetTrainingExamples(self): ...
    def SetTrainingExamples(self, examples) -> None: ...
    def GetTestExamples(self): ...
    def SetTestExamples(self, examples) -> None: ...
    def SetBadExamples(self, examples) -> None: ...
    def GetBadExamples(self): ...
    def _computeQuantBounds(self) -> None: ...
    def trainModel(self) -> None: ...
    def ClassifyExamples(self, examples, appendExamples: int = ...): ...
    def GetClassificationDetails(self): ...
    def ClassifyExample(self, example, appendExamples: int = ...): ...
