from _typeshed import Incomplete
from rdkit.ML.Neural import ActFuncs as ActFuncs, NetNode as NetNode

class Network:
    def ConstructRandomWeights(
        self, minWeight: int = ..., maxWeight: int = ...
    ) -> None: ...
    nConnections: Incomplete
    def FullyConnectNodes(self) -> None: ...
    nodeCounts: Incomplete
    numInputNodes: Incomplete
    numOutputNodes: Incomplete
    numHiddenLayers: Incomplete
    numInHidden: Incomplete
    nodeList: Incomplete
    layerIndices: Incomplete
    def ConstructNodes(self, nodeCounts, actFunc, actFuncParms) -> None: ...
    def GetInputNodeList(self): ...
    def GetOutputNodeList(self): ...
    def GetHiddenLayerNodeList(self, which): ...
    def GetNumNodes(self): ...
    def GetNumHidden(self): ...
    def GetNode(self, which): ...
    def GetAllNodes(self): ...
    lastResults: Incomplete
    def ClassifyExample(self, example, appendExamples: int = ...): ...
    def GetLastOutputs(self): ...
    def __str__(self): ...
    def __init__(
        self,
        nodeCounts,
        nodeConnections: Incomplete | None = ...,
        actFunc=...,
        actFuncParms=...,
        weightBounds: int = ...,
    ) -> None: ...
