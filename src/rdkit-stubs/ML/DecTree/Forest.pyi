from _typeshed import Incomplete
from rdkit.ML.DecTree import CrossValidate as CrossValidate, PruneTree as PruneTree

class Forest:
    def MakeHistogram(self): ...
    def CollectVotes(self, example): ...
    treeVotes: Incomplete
    def ClassifyExample(self, example): ...
    def GetVoteDetails(self): ...
    _nPossible: Incomplete
    def Grow(
        self,
        examples,
        attrs,
        nPossibleVals,
        nTries: int = ...,
        pruneIt: int = ...,
        lessGreedy: int = ...,
    ) -> None: ...
    def Pickle(self, fileName: str = ...) -> None: ...
    def AddTree(self, tree, error) -> None: ...
    errList: Incomplete
    def AverageErrors(self) -> None: ...
    treeList: Incomplete
    countList: Incomplete
    def SortTrees(self, sortOnError: int = ...) -> None: ...
    def GetTree(self, i): ...
    def SetTree(self, i, val) -> None: ...
    def GetCount(self, i): ...
    def SetCount(self, i, val) -> None: ...
    def GetError(self, i): ...
    def SetError(self, i, val) -> None: ...
    def GetDataTuple(self, i): ...
    def SetDataTuple(self, i, tup) -> None: ...
    def GetAllData(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, which): ...
    def __str__(self): ...
    def __init__(self) -> None: ...
