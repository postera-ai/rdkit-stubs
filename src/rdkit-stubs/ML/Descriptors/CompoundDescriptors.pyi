from _typeshed import Incomplete
from rdkit import RDConfig as RDConfig
from rdkit.ML.Descriptors import Descriptors as Descriptors, Parser as Parser
from rdkit.utils import chemutils as chemutils

countOptions: Incomplete

def GetAllDescriptorNames(db, tbl1, tbl2, user: str = ..., password: str = ...): ...

class CompoundDescriptorCalculator(Descriptors.DescriptorCalculator):
    def SUM(self, desc, compos): ...
    def MEAN(self, desc, compos): ...
    def DEV(self, desc, compos): ...
    def MIN(self, desc, compos): ...
    def MAX(self, desc, compos): ...
    nonZeroDescriptors: Incomplete
    requiredDescriptors: Incomplete
    def ProcessSimpleList(self): ...
    def ProcessCompoundList(self) -> None: ...
    atomDict: Incomplete
    def BuildAtomDict(self) -> None: ...
    def CalcSimpleDescriptorsForComposition(
        self, compos: str = ..., composList: Incomplete | None = ...
    ): ...
    def CalcCompoundDescriptorsForComposition(
        self, compos: str = ..., composList: Incomplete | None = ..., propDict=...
    ): ...
    def CalcDescriptorsForComposition(self, composVect, propDict): ...
    CalcDescriptors: Incomplete
    descriptorNames: Incomplete
    def GetDescriptorNames(self): ...
    simpleList: Incomplete
    compoundList: Incomplete
    dbName: Incomplete
    dbTable: Incomplete
    dbUser: Incomplete
    dbPassword: Incomplete
    def __init__(
        self,
        simpleList,
        compoundList: Incomplete | None = ...,
        dbName: Incomplete | None = ...,
        dbTable: str = ...,
        dbUser: str = ...,
        dbPassword: str = ...,
    ) -> None: ...

def _exampleCode() -> None: ...
